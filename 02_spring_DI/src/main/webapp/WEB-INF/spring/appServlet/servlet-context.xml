<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.myspring.test" />
	
	
	<!-- 이하 코드부터 직접 작성한 내용 -->
	<!-- 1단계 -->
	<beans:bean id="member" class="com.myspring.test._01Member" />  
	
	<!-- 2단계 : 생성자를 이용한 DI기능 -->
	<beans:bean id="user" class="com.myspring.test._02User" /> 	 	
	<beans:bean id="userDAO" class="com.myspring.test._02UserDAO">
		<beans:constructor-arg ref="user" />
	</beans:bean> 
	
	<!-- 3단계 : setter를 이용한 DI 기능 -->
	<!--
		_03ClientDAO clientDAO = new _03ClientDAO();
		clientDAO.setCompanyName("그린아카데미");
	  -->
	<beans:bean id="clientDAO" class="com.myspring.test._03ClientDAO">
		<beans:property name="companyName" value="더조은컴퓨터아카데미" />
		
		<!-- 
			clientDAO.setClientList(new ArrayList<String, String>());
			clientDAO.clientList.add("이세돌");
			clientDAO.clientList.add("알파고");
		 -->
		<beans:property name="clientList">
			<beans:list>
				<beans:value>이세돌</beans:value>
				<beans:value>알파고</beans:value>
			</beans:list>
		</beans:property>
		
		<!-- 
			clientDAO.setClientMap1(new HashMap<String, String>());
			clientDAO.clientMap1.put("회원1", "박명수");
			clientDAO.clientMap1.put("회원2", "유재석");
		 -->
		<beans:property name="clientMap1">
			<beans:map>
				<beans:entry>
					<beans:key>
						<beans:value>회원1</beans:value>
					</beans:key>
					<beans:value>박명수</beans:value>
				</beans:entry>
				<beans:entry>
					<beans:key>
						<beans:value>회원2</beans:value>
					</beans:key>
					<beans:value>유재석</beans:value>
				</beans:entry>
			</beans:map>
		</beans:property>
		
		<beans:property name="clientMap2">
			<beans:map>
				<beans:entry>
					<beans:key>
						<beans:value>회원3</beans:value>
					</beans:key>
					<beans:ref bean="client3" />
				</beans:entry>
				<beans:entry>
					<beans:key>
						<beans:value>회원4</beans:value>
					</beans:key>
					<beans:ref bean="client4" />
				</beans:entry>
			</beans:map>
		</beans:property>
		
	</beans:bean>
	
	<!-- 
		_03Client client3 = new _03Client();
		client3.setId("qwer");
		client3.setPw("1234");
		client3.setName("김철수");
	 -->
	<beans:bean id="client3" class="com.myspring.test._03Client">
		<beans:property name="id" value="qwer" />
		<beans:property name="pw" value="1234" />
		<beans:property name="name" value="김철수" />
	</beans:bean>
	<beans:bean id="client4" class="com.myspring.test._03Client">
		<beans:property name="id" value="abcd" />
		<beans:property name="pw" value="1234" />
		<beans:property name="name" value="이만수" />
	</beans:bean>
	
</beans:beans>









